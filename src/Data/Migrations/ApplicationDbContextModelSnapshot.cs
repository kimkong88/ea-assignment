// <auto-generated />
using System;
using Assignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Assignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Assignment.Data.Entities.Blog.Author", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("author","blog");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Blog.Comment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("PostId")
                        .HasColumnName("post_id");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("comment","blog");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Blog.Post", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("post","blog");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Blog.Comment", b =>
                {
                    b.HasOne("Assignment.Data.Entities.Blog.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Assignment.Data.Entities.Blog.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Blog.Post", b =>
                {
                    b.HasOne("Assignment.Data.Entities.Blog.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
